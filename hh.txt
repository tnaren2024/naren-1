import { test, expect } from "@playwright/test"; 
import consumerFromData from "../../data/consumerFromData.json";
import HomePage from "../../pages/commonPage/homePage.js";
import ConsumerRegistionPage from "../../pages/consumerPage/consumerPage.js";
import { CONSUMER_RESGISTRATION_URL } from "../../data/Constant/constent.js";

test.describe("Consumer Details and Registration Page Validation", () => {
  let page;
  let homePage;
  let consumerRegistionPage;

  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto("https://hyperdrive-dev.aexp.com/");
    homePage = new HomePage(page);
    await homePage.login("babu", "Hyperdrive@UI@5814");
    await page.waitForLoadState("domcontentloaded");
  });

  async function navigateToConsumerRegistration() {
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
  }

  consumerFromData.forEach(({ description, data, expected }) => {
    test(description, async () => {
      const randomSuffix = Math.floor(Math.random() * 1000 + 1);
      await navigateToConsumerRegistration();
      
      await consumerRegistionPage.registerNewConsumer(
        `${data.name}${randomSuffix}`,
        data.description,
        data.readWriteGroup,
        data.emailDlAddress
      );

      await page.waitForTimeout(2000);
      await validateConsumerRegistration(expected.validationType);
    });
  });

  async function validateConsumerRegistration(validationType) {
    const validationMessages = {
      success: () => expect.soft(page).toHaveURL("https://hyperdrive-dev.aexp.com/consumer/dashboard/addparticipant"),
      "Name is too long": async () => validateErrorMessage(consumerRegistionPage.getLongConsumerNameError(), "Name is too long"),
      "Description is too long": async () => expect.soft(await consumerRegistionPage.getLongDescriptionError()).toContain("Description is too long"),
      "Email should be @aexp.com": async () => expect.soft(await consumerRegistionPage.getInvalidEmailError()).toContain("Email should be @aexp.com"),
      "Invalid IIQ Group": async () => expect.soft(await consumerRegistionPage.getInvalidIIQGroupError()).toContain("Invalid IIQ Group"),
      "Group ID not found in IIQ": async () => expect.soft(await consumerRegistionPage.getInvalidIIQGroupError()).toContain("Group ID not found in IIQ."),
      "Value cannot be empty": async () => expect.soft(await consumerRegistionPage.getValueCannotBeEmptyError()).toContain("The value cannot be empty."),
    };

    if (validationMessages[validationType]) {
      await validationMessages[validationType]();
    } else {
      throw new Error(`Unhandled validation type: ${validationType}`);
    }
  }

  async function validateErrorMessage(actualMessagePromise, expectedMessage) {
    const actualMessage = await actualMessagePromise;
    console.log("Actual message:", actualMessage);
    await expect.soft(actualMessage).toContain(expectedMessage);
  }

  test("Verify user action menu", async () => {
    await homePage.profile();
    await homePage.userActionMenuButtonVisiable();
  });

  test("Verify Registration Page URLs", async () => {
    await homePage.profile();
    await homePage.clickEdit();

    const expectedUrls = Object.values(CONSUMER_RESGISTRATION_URL);
    const selectors = [
      consumerRegistionPage.hyperdriveDoc_Loc,
      consumerRegistionPage.iiqDoc_Loc,
      consumerRegistionPage.iiqDoc_Loc2,
      consumerRegistionPage.readWriteUrl_Loc,
      consumerRegistionPage.readOnlyUrl_Loc1,
      consumerRegistionPage.emailDistributionUrl_Loc,
    ];

    const urls = await homePage.docsCaptureLinks(selectors);
    urls.forEach((url, index) => {
      await expect.soft(url).toBe(expectedUrls[index]);
    });
  });

  test("Verify disabled validate buttons before consumer registration", async () => {
    await navigateToConsumerRegistration();
    
    const count = await consumerRegistionPage.validatebtn_Loc.count();
    console.log("Total number of disabled validate buttons:", count);

    for (let i = 0; i < count; i++) {
      await expect.soft(consumerRegistionPage.validatebtn_Loc.nth(i)).toBeDisabled();
    }
    await expect.soft(consumerRegistionPage.submitBtnLocator).toBeDisabled();
  });

  test("Verify empty name input", async () => {
    await navigateToConsumerRegistration();
    await validateInputAndExpectError("  ", consumerRegistionPage.valueCannotBeEmptyError);
  });

  async function validateInputAndExpectError(inputValue, errorMessageLocator) {
    await consumerRegistionPage.consumerName.fill(inputValue);
    await consumerRegistionPage.nameValidateBtn.click();
    await expect.soft(errorMessageLocator).toBeVisible();
  }

  // New URL validation test cases
  const urlTestCases = [
    {
      description: "Test valid Hyperdrive document URL",
      url: "https://hyperdrive-dev.aexp.com/documents",
      expected: "https://hyperdrive-dev.aexp.com/documents"
    },
    {
      description: "Test valid IIQ document URL",
      url: "https://iiq.aexp.com/documents",
      expected: "https://iiq.aexp.com/documents"
    },
    {
      description: "Test valid read-write URL",
      url: "https://hyperdrive-dev.aexp.com/read-write",
      expected: "https://hyperdrive-dev.aexp.com/read-write"
    },
    {
      description: "Test valid read-only URL",
      url: "https://hyperdrive-dev.aexp.com/read-only",
      expected: "https://hyperdrive-dev.aexp.com/read-only"
    },
    {
      description: "Test valid email distribution URL",
      url: "https://hyperdrive-dev.aexp.com/email-distribution",
      expected: "https://hyperdrive-dev.aexp.com/email-distribution"
    },
    {
      description: "Test invalid URL format",
      url: "invalid-url-format",
      expected: "Invalid URL"
    }
  ];

  urlTestCases.forEach(({ description, url, expected }) => {
    test(description, async () => {
      await homePage.profile();
      await consumerRegistionPage.checkUrl(url); // Assume this method checks the URL format
      if (expected === "Invalid URL") {
        await expect(page).toHaveURL(/invalid-url-format/);
      } else {
        await expect(page).toHaveURL(expected);
      }
    });
  });

  test.afterEach(async () => {
    await homePage.quit();
  });
});test("Verified background color of Name ", async () => {
    await navigateToConsumerRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.consumerName("test");
    await consumerRegistionPage.consumerNameValidateLocator.click();
    await page.waitForTimeout(2000);
    await consumerRegistionPage.Name_Color.click();
    const element = await consumerRegistionPage.Name_Color;
    await homePage.backGroundColor(element);
  });
export const PRODUCER_DASHBOARD_TEXT={
    INGRESS:"Below you can find the constraints you have created in Hyperdrive. Constraints determine where Hyperdrive can perform processing. For additional help or more information, please visit the Hyperdrive documentation.",
    PROCESSING:"Below you can find the workflows you have created for processing events in Hyperdrive. For additional help or more information, please visit the Hyperdrive documentation.",
    SOURCE:"Below you can find the sources from the schemas that you have registered to synchronize with Hyperdrive from Schema Factory. For additional help or more information, please visit the Hyperdrive documentation.",   
};
export const PRODUCER_RESGISTRATION_URL={
    PRODUCER_RESGISTRATION_DOCS:'https://spaces.aexp.com/teams/hyperdrive/SitePages/Hyperdrive-3-Customer-Registrations.aspx#producer',
    IIQ_DOCUMENTION_DOCS :'https://iiq.aexp.com/iam/home.jsf',
    CAR_ID_DOCS :'https://central.aexp.com/',
    RESGISTRATION_IIQ_DOCS :"https://iiq.aexp.com/iam/home.jsf",
    READ_WRIGHT_GROUP_DOCS:"https://iiq.aexp.com/",
    READ_ONLY_GROUP_DOCS:"https://iiq.aexp.com/",
    EMAIL_DISTRIBUTION_DOCS:"https://mygroups.intra.aexp.com/IdentityManagement/aspx/groups/AllDLs.aspx",
    SLA_DOCS_URL:"https://spaces.aexp.com/teams/hyperdrive/SitePages/Hyperdrive-3-SLAs.aspx"
};
export const ACM_RESGISTRATION_URL={
    ACM_RESGISTRATION_DOCS:'https://spaces.aexp.com/teams/hyperdrive/SitePages/Hyperdrive-3-Customer-Registrations.aspx#access-control-manager',
    IIQ_DOCUMENTION_DOCS :'https://iiq.aexp.com/iam/home.jsf',    
    RESGISTRATION_IIQ_DOCS :"https://iiq.aexp.com/iam/home.jsf",
    READ_ONLY_GROUP_DOCS:"https://iiq.aexp.com/",
    EMAIL_DISTRIBUTION_DOCS:"https://mygroups.intra.aexp.com/IdentityManagement/aspx/groups/AllDLs.aspx"    
};

export const PRODUCER_RESGISTRATION_TEXT={
    //IMPORTENT_TEXT_NOTE_DISCRIPTION_PART1:"By registering as a producer, you agree that you are not using Hyperdrive for batch data (e.g. data that is not realtime), application logging, or any other work that is not customer-focused.",
    IMPORTENT_TEXT_NOTE_DISCRIPTION_PART2:"After registering a new producer, please contact Hyperdrive Product Support to schedule the alignment of processing.",
    PRODUCER_NAME_TEXT_DISCRIPTION:"Make your name as descriptive as possible so you can easily identify the registration in the future. This name must be unique.",
    PRODUCER_RESGISTRATION_IIQ_GROUP_TEXT:"In order to register a new producer, you must first tell us which IIQ groups this registration belongs to. IIQ groups determine Hyperdriveâ€™s access control. Users must be members of the associated group in order to have the properly aligned access for that group. If you have questions about the IIQ process, please see the IIQ documentation.",
    READ_WRIGHT_GROUP_TEXT_DISCRIPTION:"This group has read/write access to configurations and other artifacts that control processing, e.g. ingress channel configurations, schema registrations, workflows, etc. You need to be a member of the IIQ group and not just a custodian. If you have questions about the IIQ process, please see the IIQ documentation.",
    READ_ONLY_GROUP_TEXT_DISCRIPTION:"This group has read only access to configurations and other artifacts that control processing, e.g. ingress channel configurations, schema registrations, workflows, etc.",
}

export const HYPERDRIVE_SLA={
     SLA_TEXT:"Service Level Agreement",
}

export const CONSUMER_RESGISTRATION_TEXT={
    //IMPORTENT_TEXT_NOTE_DISCRIPTION_PART1:"By registering as a producer, you agree that you are not using Hyperdrive for batch data (e.g. data that is not realtime), application logging, or any other work that is not customer-focused.",
    //IMPORTENT_TEXT_NOTE_DISCRIPTION_PART2:"After registering a new producer, please contact Hyperdrive Product Support to schedule the alignment of processing.",
    CONSUMER_NAME_TEXT_DISCRIPTION:"Make your name as descriptive as possible so you can easily identify the use case in the future. This name must be unique to your consumer registration.",
    CONSUMER_RESGISTRATION_IIQ_GROUP_TEXT:"In order to register a new consumer, you must first tell us which IIQ groups this registration belongs to. IIQ groups determine Hyperdriveâ€™s access control. Users must be members of the associated group in order to have the properly aligned access for that group. If you have questions about the IIQ process, please see the IIQ documentation.",
    READ_WRIGHT_GROUP_TEXT_DISCRIPTION:"This group has read/write access to configurations and other artifacts that control processing, e.g. ingress channel configurations, schema registrations, workflows, etc. You need to be a member of the IIQ group and not just a custodian. If you have questions about the IIQ process, please see the IIQ documentation.",
    READ_ONLY_GROUP_TEXT_DISCRIPTION:"This group has read only access to configurations and other artifacts that control processing, e.g. ingress channel configurations, schema registrations, workflows, etc.",
}
export const CONSUMER_RESGISTRATION_URL={
    CONSUMER_RESGISTRATION_DOCS:'https://spaces.aexp.com/teams/hyperdrive/SitePages/Hyperdrive-3-Customer-Registrations.aspx#producer',
    IIQ_DOCUMENTION_DOCS :'https://iiq.aexp.com/iam/home.jsf',
    RESGISTRATION_IIQ_DOCS :"https://spaces.aexp.com/teams/hyperdrive/SitePages/Hyperdrive-3-Customer-Registrations.aspx#consumer",
    READ_WRIGHT_GROUP_DOCS:"https://iiq.aexp.com/",
    READ_ONLY_GROUP_DOCS:"https://iiq.aexp.com/",
    EMAIL_DISTRIBUTION_DOCS:"https://mygroups.intra.aexp.com/IdentityManagement/aspx/groups/AllDLs.aspx"
};
